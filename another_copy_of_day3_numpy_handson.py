# -*- coding: utf-8 -*-
"""Another copy of Day3_NumPy_HandsOn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j9y3_nCKyhHlGB2tTlt-pFdfetcFt3UC

## Introduction to NumPy

Introduction to NumPy and why it's needed for fast numerical computations.

**Task:** Try implementing this concept using a small example.
"""

import numpy as np
import time

# Python loop version
size = 100000000
a = list(range(size))
b = list(range(size))

start = time.time()
c = [a[i] + b[i] for i in range(size)]
end = time.time()
print("Pure Python time:", end - start, "seconds")

# NumPy version
a_np = np.arange(size)
b_np = np.arange(size)

start = time.time()
c_np = a_np + b_np
end = time.time()
print("NumPy time:", end - start, "seconds")

"""## Creating NumPy Arrays

Use np.array, np.zeros, np.ones, np.arange, and np.random to create arrays.

**Task:** Try implementing this concept using a small example.
"""

arr = np.array([1, 2, 3, 4, 5])
b = np.ones((4, 5))
c = np.zeros((3, 3))
d = np.arange(0, 10)
arr1=np.array([6,7,8,9,10])
e=np.concatenate([arr,arr1])
arr2=np.array([[1,2.3,4],[3,5.6,1.2]])
print (arr)
print(b)
print(c)
print(d)
print(e)
print(arr2.astype(np.int32))

"""## Array Properties

Check ndim, shape, size, and dtype of arrays.

**Task:** Try implementing this concept using a small example.
"""

# Your code here
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a.transpose())
print(a.ndim)
print(a.size)
print(a.shape)
print (a.dtype)
np.savez('data.npz',a=a)
data = np.load('data.npz')
data['a']

"""## Reshaping Arrays

Use reshape(), ravel(), and flatten().

**Task:** Try implementing this concept using a small example.
"""

# Your code here
import numpy as np
arr=np.array([1,2,3,4,5,6,7,8,9,10])
print(arr.reshape(5,2))
a=np.random.random((5,6))
print (a.reshape(3,10))
a=np.array([[1,2,3,4],[5,6,7,8]])

print(a.ravel())
print(a.flatten())

"""## Transposing Arrays

Use .T and np.transpose().

**Task:** Try implementing this concept using a small example.
"""

# Your code here
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
print(a.transpose())

"""## Array Math Operations

Perform element-wise addition, subtraction, multiplication, and division.

**Task:** Try implementing this concept using a small example.
"""

# Your code here
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
b=np.array([[10,11,12],[13,14,15],[16,17,18]])
print(a+b)
print(a*b)
print(a-b)
print(a/b)

"""## Universal Functions

Use ufuncs like np.sqrt, np.exp, np.sin, np.isnan.

**Task:** Try implementing this concept using a small example.
"""

# Your code here
a=np.array([[1,2,3],[4,5,6],[7,8,9]])
np.sqrt(a)

"""## Indexing and Slicing

Index and slice NumPy arrays including boolean indexing.

**Task:** Try implementing this concept using a small example.
"""

# Your code here
arr = np.array([[1, 2, 3, 4, 5],[6,7,8,9,10]])
print (arr[1:4,[7:10])
print(a<=5)

"""## Axis-wise Operations

Use axis parameter with sum(), mean(), etc.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Broadcasting

Understand how broadcasting works with different shaped arrays.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Saving and Loading Arrays

Use np.savez, np.load to store and retrieve arrays.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Extra: Copy vs View

Understand the difference between shallow and deep copies in NumPy.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Extra: Data Types and Type Conversion

Use astype() to convert between data types.

**Task:** Try implementing this concept using a small example.
"""

# Your code here