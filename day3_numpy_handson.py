# -*- coding: utf-8 -*-
"""Day3_NumPy_HandsOn.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14mP20z6lkAZtKCXLkqVFIDQOWOZLYnqX

## Introduction to NumPy

Introduction to NumPy and why it's needed for fast numerical computations.

**Task:** Try implementing this concept using a small example.
"""

import matplotlib.pyplot as plt
# Load your image
image = Image.open("f1.jpeg")  # Change this to your image file path

# Convert image to NumPy array
image_array = np.array(image)

plt.imshow(image_array)
plt.axis('off')  # Optional: remove axes
plt.show()

from PIL import Image
import numpy as np

# Show basic info
print("Image shape:", image_array.shape)
print("Pixel matrix:\n", image_array)

# If you want to see pixel at row 0, col 0
print("Pixel at (0,0):", image_array[0, 0])

import numpy as np
import time

# Python loop version
size = 100000000
a = list(range(size))
b = list(range(size))

start = time.time()
c = [a[i] + b[i] for i in range(size)]
end = time.time()
print("Pure Python time:", end - start, "seconds")

# NumPy version
a_np = np.arange(size)
b_np = np.arange(size)

start = time.time()
c_np = a_np + b_np
end = time.time()
print("NumPy time:", end - start, "seconds")

"""## Creating NumPy Arrays

Use np.array, np.zeros, np.ones, np.arange, and np.random to create arrays.

**Task:** Try implementing this concept using a small example.
"""

import numpy as np
arr = np.array([1, 2, 3, 4, 5])
b = np.ones((3, 3))
c = np.zeros((3, 3))
# print(arr)
# print(b)

d = np.concatenate((b, c), axis=1)
print(d)

# d = np.arange(0, 10, 3)
# print(d)

# np ones like
# np zeros like
# np random
# do the reshape function in the next box

# Activity ravel flatten

matrix = np.array([[1, 2, 3],
                   [4, 5, 6],
                   [7, 8, 9]])

# Flatten the matrix
flattened = matrix.flatten()
print("Flattened Matrix:")
print(flattened)

# Ravel the matrix
raveled = matrix.ravel()
print("\nRavelled Matrix:")
print(raveled)

"""## Array Properties

Check ndim, shape, size, and dtype of arrays.

**Task:** Try implementing this concept using a small example.
"""

a = np.array([[1, 2, 3], [4, 5, 6]])

a.ndim
a.size
a.shape
a.dtype

"""## Reshaping Arrays

Use reshape(), ravel(), and flatten().

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Transposing Arrays

Use .T and np.transpose().

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Array Math Operations

Perform element-wise addition, subtraction, multiplication, and division.

**Task:** Try implementing this concept using a small example.
"""

# Your code here
a = np.array([[1, 2, 3], [4, 5, 6]])
b = np.array([[7, 8, 9], [10, 11, 12]])

c = a + b
print(c)

"""## Universal Functions

Use ufuncs like np.sqrt, np.exp, np.sin, np.isnan.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Indexing and Slicing

Index and slice NumPy arrays including boolean indexing.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Axis-wise Operations

Use axis parameter with sum(), mean(), etc.

**Task:** Try implementing this concept using a small example.
"""

a = np.array([[1, 2, 3], [4, 5, 6]])
print("Row-wise sum:", a.sum(axis=1))
print("Column-wise sum:", a.sum(axis=0))

print("Row-wise mean:", a.mean(axis=1))
print("Column-wise mean:", a.mean(axis=0))

"""## Broadcasting

Understand how broadcasting works with different shaped arrays.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Saving and Loading Arrays

Use np.savez, np.load to store and retrieve arrays.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Extra: Copy vs View

Understand the difference between shallow and deep copies in NumPy.

**Task:** Try implementing this concept using a small example.
"""

# Your code here

"""## Extra: Data Types and Type Conversion

Use astype() to convert between data types.

**Task:** Try implementing this concept using a small example.
"""

# Your code here